# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: ["master"]

jobs:
  build:
    runs-on: self-hosted

    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
      - run: npm ci
      - run: npm run build --if-present
      - run: |
          touch .env
          echo MONGODB_URI=$MONGODB_URI >> .env
          echo APP_NAME=$APP_NAME >> .env
          echo CLOUDINARY_API_KEY=$CLOUDINARY_API_KEY >> .env
          echo CLOUDINARY_API_SECRET=$CLOUDINARY_API_SECRET >> .env
          echo CLOUDINARY_NAME=$CLOUDINARY_NAME >> .env
          echo EMAIL=$EMAIL >> .env
          echo EMAIL_SERVICE_PASSWORD=$EMAIL_SERVICE_PASSWORD >> .env
          echo JWT_ACCESS_SECRET=$JWT_ACCESS_SECRET >> .env
          cat .env
        env:
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
          APP_NAME: ${{ secrets.APP_NAME }}
          CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
          CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}
          CLOUDINARY_NAME: ${{ secrets.CLOUDINARY_NAME }}
          EMAIL: ${{ secrets.EMAIL }}
          EMAIL_SERVICE_PASSWORD: ${{ secrets.EMAIL_SERVICE_PASSWORD }}
          JWT_ACCESS_SECRET: ${{ secrets.JWT_ACCESS_SECRET }}

      - run: |
          pm2 stop 0
          pm2 start 0
          pm2 save
